{"mappings":"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","sources":["<anon>","src/hookContent.js"],"sourcesContent":["(() => {\n(()=>{\n    const defineSubscribableObject = (obj)=>new Proxy({\n            ...obj,\n            _subscribers: {},\n            subscribe: function(prop, func) {\n                if (Array.isArray(this._subscribers[prop])) this._subscribers[prop].push(func);\n                else this._subscribers[prop] = [\n                    func\n                ];\n            }\n        }, {\n            set (obj, prop, newVal) {\n                obj[prop] = newVal;\n                if (Array.isArray(obj._subscribers[prop])) for (let subscriber of obj._subscribers[prop])subscriber(newVal);\n                return true;\n            }\n        });\n    if (window.__HOPP_EXTENSION_STATUS_PROXY__) window.__HOPP_EXTENSION_STATUS_PROXY__.status = \"available\";\n    else window.__HOPP_EXTENSION_STATUS_PROXY__ = defineSubscribableObject({\n        status: \"available\"\n    });\n    window.__POSTWOMAN_EXTENSION_HOOK__ = {\n        getVersion: ()=>({\n                major: 0,\n                minor: 33\n            }),\n        decodeB64ToArrayBuffer: (input, ab)=>{\n            const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n            const bytes = parseInt(input.length / 4 * 3, 10);\n            let uarray;\n            let chr1, chr2, chr3;\n            let enc1, enc2, enc3, enc4;\n            let i = 0;\n            let j = 0;\n            if (ab) uarray = new Uint8Array(ab);\n            else uarray = new Uint8Array(bytes);\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n            for(i = 0; i < bytes; i += 3){\n                //get the 3 octects in 4 ascii chars\n                enc1 = keyStr.indexOf(input.charAt(j++));\n                enc2 = keyStr.indexOf(input.charAt(j++));\n                enc3 = keyStr.indexOf(input.charAt(j++));\n                enc4 = keyStr.indexOf(input.charAt(j++));\n                chr1 = enc1 << 2 | enc2 >> 4;\n                chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n                chr3 = (enc3 & 3) << 6 | enc4;\n                uarray[i] = chr1;\n                if (enc3 != 64) uarray[i + 1] = chr2;\n                if (enc4 != 64) uarray[i + 2] = chr3;\n            }\n            return uarray;\n        },\n        transformFormData: async (config)=>{\n            const toBase64 = (file)=>new Promise((resolve, reject)=>{\n                    const reader = new FileReader();\n                    reader.readAsDataURL(file);\n                    reader.onload = ()=>resolve(reader.result);\n                    reader.onerror = (error)=>reject(error);\n                });\n            if (config.data instanceof FormData) {\n                config.formFiles = [];\n                config.formData = [];\n                const entries = Array.from(config.data.entries());\n                for (const [key, value] of entries)if (value instanceof File) {\n                    const convertedValue = await toBase64(value);\n                    config.formFiles.push({\n                        key: key,\n                        value: convertedValue,\n                        filename: value.name\n                    });\n                } else config.formData.push({\n                    key: key,\n                    value: value\n                });\n                config.data = null;\n                return config;\n            }\n        },\n        cancelRequest: (config)=>{\n            window.postMessage({\n                type: \"__POSTWOMAN_EXTENSION_CANCEL__\"\n            }, \"*\");\n        },\n        sendRequest: (config)=>new Promise((resolve, reject)=>{\n                function handleMessage(ev) {\n                    if (ev.source !== window || !ev.data) return;\n                    if (ev.data.type === \"__POSTWOMAN_EXTENSION_RESPONSE__\") {\n                        // Apply transformation from base64 to arraybuffer\n                        if (ev.data.isBinary) {\n                            const bytes = ev.data.response.data.length / 4 * 3;\n                            const ab = new ArrayBuffer(bytes);\n                            window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(ev.data.response.data, ab);\n                            ev.data.response.data = ab;\n                        }\n                        resolve(ev.data.response);\n                        window.removeEventListener(\"message\", handleMessage);\n                    } else if (ev.data.type === \"__POSTWOMAN_EXTENSION_ERROR__\") {\n                        const error = ev.data.error;\n                        // We're restoring the original Error object here\n                        const e = new Error(error.message, error.fileName, error.lineNumber);\n                        e.name = error.name;\n                        e.stack = error.stack;\n                        if (error.response) {\n                            e.response = error.response;\n                            const bytes = e.response.data.length / 4 * 3;\n                            const ab = new ArrayBuffer(bytes);\n                            window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(e.response.data, ab);\n                            e.response.data = ab;\n                        }\n                        reject(e);\n                        window.removeEventListener(\"message\", handleMessage);\n                    }\n                }\n                window.addEventListener(\"message\", handleMessage);\n                window.__POSTWOMAN_EXTENSION_HOOK__.transformFormData(config).then((transformedConfig)=>{\n                    window.postMessage({\n                        type: \"__POSTWOMAN_EXTENSION_REQUEST__\",\n                        config: config\n                    }, \"*\");\n                });\n            })\n    };\n})();\n\n})();\n//# sourceMappingURL=hookContent.js.map\n",";(() => {\n  const defineSubscribableObject = (obj) =>\n    new Proxy(\n      {\n        ...obj,\n        _subscribers: {},\n        subscribe: function (prop, func) {\n          if (Array.isArray(this._subscribers[prop])) {\n            this._subscribers[prop].push(func)\n          } else {\n            this._subscribers[prop] = [func]\n          }\n        },\n      },\n      {\n        set(obj, prop, newVal) {\n          obj[prop] = newVal\n\n          if (Array.isArray(obj._subscribers[prop])) {\n            for (let subscriber of obj._subscribers[prop]) {\n              subscriber(newVal)\n            }\n          }\n\n          return true\n        },\n      }\n    )\n\n  if (window.__HOPP_EXTENSION_STATUS_PROXY__) {\n    window.__HOPP_EXTENSION_STATUS_PROXY__.status = \"available\"\n  } else {\n    window.__HOPP_EXTENSION_STATUS_PROXY__ = defineSubscribableObject({\n      status: \"available\",\n    })\n  }\n\n  window.__POSTWOMAN_EXTENSION_HOOK__ = {\n    getVersion: () => ({ major: 0, minor: 33 }),\n\n    decodeB64ToArrayBuffer: (input, ab) => {\n      const keyStr =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n\n      const bytes = parseInt((input.length / 4) * 3, 10)\n\n      let uarray\n      let chr1, chr2, chr3\n      let enc1, enc2, enc3, enc4\n      let i = 0\n      let j = 0\n\n      if (ab) uarray = new Uint8Array(ab)\n      else uarray = new Uint8Array(bytes)\n\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\")\n\n      for (i = 0; i < bytes; i += 3) {\n        //get the 3 octects in 4 ascii chars\n        enc1 = keyStr.indexOf(input.charAt(j++))\n        enc2 = keyStr.indexOf(input.charAt(j++))\n        enc3 = keyStr.indexOf(input.charAt(j++))\n        enc4 = keyStr.indexOf(input.charAt(j++))\n\n        chr1 = (enc1 << 2) | (enc2 >> 4)\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)\n        chr3 = ((enc3 & 3) << 6) | enc4\n\n        uarray[i] = chr1\n        if (enc3 != 64) uarray[i + 1] = chr2\n        if (enc4 != 64) uarray[i + 2] = chr3\n      }\n\n      return uarray\n    },\n\n    transformFormData: async (config) => {\n      const toBase64 = (file) =>\n        new Promise((resolve, reject) => {\n          const reader = new FileReader()\n          reader.readAsDataURL(file)\n          reader.onload = () => resolve(reader.result)\n          reader.onerror = (error) => reject(error)\n        })\n\n      if (config.data instanceof FormData) {\n        config.formFiles = []\n        config.formData = []\n\n        const entries = Array.from(config.data.entries())\n\n        for (const [key, value] of entries) {\n          if (value instanceof File) {\n            const convertedValue = await toBase64(value)\n\n            config.formFiles.push({\n              key: key,\n              value: convertedValue,\n              filename: value.name,\n            })\n          } else {\n            config.formData.push({\n              key: key,\n              value: value,\n            })\n          }\n        }\n\n        config.data = null\n\n        return config\n      }\n    },\n\n    cancelRequest: (config) => {\n      window.postMessage(\n        {\n          type: \"__POSTWOMAN_EXTENSION_CANCEL__\",\n        },\n        \"*\"\n      )\n    },\n\n    sendRequest: (config) =>\n      new Promise((resolve, reject) => {\n        function handleMessage(ev) {\n          if (ev.source !== window || !ev.data) {\n            return\n          }\n\n          if (ev.data.type === \"__POSTWOMAN_EXTENSION_RESPONSE__\") {\n            // Apply transformation from base64 to arraybuffer\n            if (ev.data.isBinary) {\n              const bytes = (ev.data.response.data.length / 4) * 3\n              const ab = new ArrayBuffer(bytes)\n              window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(\n                ev.data.response.data,\n                ab\n              )\n\n              ev.data.response.data = ab\n            }\n\n            resolve(ev.data.response)\n            window.removeEventListener(\"message\", handleMessage)\n          } else if (ev.data.type === \"__POSTWOMAN_EXTENSION_ERROR__\") {\n            const error = ev.data.error\n\n            // We're restoring the original Error object here\n            const e = new Error(error.message, error.fileName, error.lineNumber)\n            e.name = error.name\n            e.stack = error.stack\n            if (error.response) {\n              e.response = error.response\n\n              const bytes = (e.response.data.length / 4) * 3\n              const ab = new ArrayBuffer(bytes)\n\n              window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(\n                e.response.data,\n                ab\n              )\n              e.response.data = ab\n            }\n            reject(e)\n            window.removeEventListener(\"message\", handleMessage)\n          }\n        }\n\n        window.addEventListener(\"message\", handleMessage)\n\n        window.__POSTWOMAN_EXTENSION_HOOK__\n          .transformFormData(config)\n          .then((transformedConfig) => {\n            window.postMessage(\n              {\n                type: \"__POSTWOMAN_EXTENSION_REQUEST__\",\n                config,\n              },\n              \"*\"\n            )\n          })\n      }),\n  }\n})()\n"],"names":["window","__HOPP_EXTENSION_STATUS_PROXY__","status","Proxy","_subscribers","subscribe","prop","func","Array","isArray","push","set","obj","newVal","subscriber","__POSTWOMAN_EXTENSION_HOOK__","getVersion","major","minor","decodeB64ToArrayBuffer","input","ab","uarray","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","bytes","parseInt","length","i","j","Uint8Array","replace","indexOf","charAt","transformFormData","config","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","data","FormData","formFiles","formData","entries","from","key","value","File","convertedValue","filename","name","cancelRequest","postMessage","type","sendRequest","addEventListener","handleMessage","ev","source","isBinary","response","ArrayBuffer","removeEventListener","e","Error","message","fileName","lineNumber","stack","then","transformedConfig"],"version":3,"file":"hookContent.js.map"}